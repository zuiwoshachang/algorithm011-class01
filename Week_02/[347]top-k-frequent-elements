class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        std::unordered_map<int, int> itemCntMap;
        for (auto item : nums) {
            ++itemCntMap[item];
        }

        using Data = pair<int, int>;
        std::priority_queue<Data, vector<Data>, std::greater<Data>> Q;
        for (auto& item : itemCntMap) {
            Q.push({item.second, item.first});
            if (Q.size() > k) Q.pop();   
        }

        vector<int> res;
        while (!Q.empty()) {
            res.push_back(Q.top().second);
            Q.pop();
        }

        return res;
    }
};
