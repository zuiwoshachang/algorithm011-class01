/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    std::unordered_map<int, int> m_inIdxMap;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* root = nullptr;
                
        for (int i = 0; i < inorder.size(); ++i) {
            m_inIdxMap[inorder[i]] = i;
        }
        helper(root, preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
        return root;
    }

    void helper(TreeNode*& root, vector<int>& preorder, int i, int j, vector<int>& inorder, int m, int n) {
        // TO DO 
        if (i > j || m > n) return;

        root = new TreeNode(preorder[i]);
        int in_idx = m_inIdxMap[preorder[i]];
        int offset = in_idx - m;
        helper(root->left, preorder, i + 1, i + offset, inorder, m, in_idx - 1);
        helper(root->right, preorder, i + offset + 1, j, inorder, in_idx + 1, n);
    }
};